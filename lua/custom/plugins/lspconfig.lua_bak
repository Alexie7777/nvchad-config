local M = {}
local lspconfig = require "lspconfig"

M.setup_lsp = function(attach, capabilities)
   -- lspservers with default config
   local servers = {
      "html",
      "cssls",
      "tsserver",
      "bashls",
      "jsonls",
      "cssmodules_ls",
      "yamlls",
      "eslint",
   }

   for _, lsp in ipairs(servers) do
      lspconfig[lsp].setup {
         on_attach = function(client, bufnr)
            attach(client, bufnr)
            -- change gopls server capabilities

            if lsp == "tsserver" then
               local ts_utils = require "nvim-lsp-ts-utils"
               ts_utils.setup {}
               ts_utils.setup_client(client)
            end
         end,
         -- on_attach = attach,
         capabilities = capabilities,
      }
   end
end

-- lspconfig.vuels.setup {
--    capabilities = M.capabilities,
--    on_attach = M.on_attach,
--    init_options = {
--       config = {
--          css = { "cssls" },
--          emmet = { "emmet_ls" },
--          html = {
--             suggest = {},
--          },
--          javascript = {
--             format = {},
--          },
--          stylusSupremacy = {},
--          typescript = {
--             format = {},
--          },
--          vetur = {
--             completion = {
--                autoImport = true,
--                tagCasing = "kebab",
--                useScaffoldSnippets = false,
--             },
--             format = {
--                defaultFormatter = {
--                   js = "none",
--                   ts = "none",
--                },
--                defaultFormatterOptions = {},
--                scriptInitialIndent = false,
--                styleInitialIndent = false,
--             },
--             useWorkspaceDependencies = false,
--             validation = {
--                script = true,
--                style = true,
--                template = true,
--             },
--          },
--       },
--    },
-- }

-- volar config start
local util = require "lspconfig.util"
local function get_typescript_server_path(root_dir)
   local global_ts = "/opt/homebrew/lib/node_modules/typescript/lib/tsserverlibrary.js"
   -- Alternative location if installed as root:
   -- local global_ts = '/usr/local/lib/node_modules/typescript/lib/tsserverlibrary.js'
   local found_ts = ""
   local function check_dir(path)
      found_ts = util.path.join(path, "node_modules", "typescript", "lib", "tsserverlibrary.js")
      if util.path.exists(found_ts) then
         return path
      end
   end
   if util.search_ancestors(root_dir, check_dir) then
      return found_ts
   else
      return global_ts
   end
end

require("lspconfig").volar.setup {
   on_new_config = function(new_config, new_root_dir)
      new_config.init_options.typescript.serverPath = get_typescript_server_path(new_root_dir)
   end,
   capabilities = M.capabilities,
   on_attach = M.on_attach,
   -- filetypes = { "typescript", "javascript", "javascriptreact", "typescriptreact", "vue", "json" },

   init_options = {
      documentFeatures = {
         documentColor = true,
      },
      -- typescript = {
      --    serverPath = "/opt/homebrew/lib/node_modules/typescript/lib/tsserverlibrary.js",
      -- },
      -- hover = false,
   },
}
-- volar config end

require("lspconfig").emmet_ls.setup {
   capabilities = M.capabilities,
   on_attach = M.on_attach,
   filetypes = { "html", "css", "vue" },
}

require("lspconfig").cssls.setup {
   capabilities = M.capabilities,
   on_attach = M.on_attach,
   filetypes = { "css", "scss", "less", "vue" },
}

return M
